steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(versionSpec)
      architecture: $(architecture)
    condition: eq(variables.interpreter, 'CPython')

  - bash: |
      echo "##vso[task.setvariable variable=PATH]$(System.DefaultWorkingDirectory)/pypy.tmp/pypy/bin:$(PATH)"
    condition: and(eq( variables['Agent.OS'], 'Linux' ), eq(variables.interpreter, 'PyPy'))
  - bash: |
      echo "##vso[task.setvariable variable=PATH]$(System.DefaultWorkingDirectory)/pypy.tmp/pypy/bin:$(PATH)"
    condition: and(eq( variables['Agent.OS'], 'Darwin' ), eq(variables.interpreter, 'PyPy'))
  - bash: |
      echo "##vso[task.setvariable variable=PATH]$(System.DefaultWorkingDirectory)\pypy.tmp\pypy;$(PATH)"
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq(variables.interpreter, 'PyPy'))
  - bash: |
      mkdir pypy.tmp
      cd pypy.tmp
      curl --location --output archive $(url)
      ${{ parameters.extracter }} archive
      rm archive
      mv ./* pypy
      cd ..
    displayName: 'Get PyPy'
    condition: eq(variables.interpreter, 'PyPy')
  - bash: |
      type $(python_binary)
      $(python_binary) --version
    displayName: 'Check for PyPy'
    condition: eq(variables.interpreter, 'PyPy')
  - bash: |
      curl --output pypy.tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
      $(python_binary) pypy.tmp/get-pip.py
    displayName: 'Get PIP'
    condition: eq(variables.interpreter, 'PyPy')
