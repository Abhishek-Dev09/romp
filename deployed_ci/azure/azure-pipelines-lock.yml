trigger: none
pr: none

variables:
  archive_url: ${ROMP_ARCHIVE_URL}
  command: ${ROMP_COMMAND}
  environments: ${ROMP_ENVIRONMENTS}

jobs:
  - job: generate_matrix
    displayName: Generate Matrix
    steps:
      - bash: |
          python src/romp/_matrix.py --environments ${ROMP_ENVIRONMENTS}
        name: generate_matrix
        env:
          ROMP_ENVIRONMENTS: $(ROMP_ENVIRONMENTS)

  - job: get_input_archive
    displayName: Get input archive
    steps:
      - bash: |
          if [[ -z "$(archive_url)" ]]; then tar -cvzf input.tar.gz --files-from /dev/null; else curl --silent --show-error "$(archive_url)" --output input.tar.gz; fi
        displayName: Get input archive
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'input'
          targetPath: '$(System.DefaultWorkingDirectory)/input.tar.gz'

  - job: romp_on
    displayName: romp on
    dependsOn:
      - generate_matrix
      - get_input_archive
    pool:
      vmImage: $[ variables.vmImage ]
    strategy:
      matrix: $[ dependencies.generate_matrix.outputs['generate_matrix.JobsToRun'] ]
    steps:
      - template: templates/tasks/get_python.yml
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'input'
          targetPath: $(System.DefaultWorkingDirectory)
      - bash: |
          mkdir work
          cd work
          tar --extract --verbose --file ../input.tar.gz
        displayName: Extract input
      - bash: |
          python -c 'import sys; print(sys.version); print(sys.platform)'
        displayName: Report Python version
      - bash: |
          cd work
          eval $(command)
        displayName: Run Command
      - task: CopyFiles@2
        inputs:
          contents: 'work/requirements/*.txt'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: lock_files
